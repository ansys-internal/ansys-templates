name: CI
on:
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION : '3.10'
  LIBRARY_NAME: 'ansys-templates'
  LIBRARY_NAMESPACE: 'ansys.templates'
  DOCUMENTATION_CNAME: 'templates.ansys.com'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  code-style:
    name: Code style
    runs-on: ubuntu-latest
    steps:
      - name: "Run PyAnsys code style checks"
        uses: pyansys/actions/code-style@v3

  doc-style:
    name: Doc style
    runs-on: ubuntu-latest
    steps:
      - name: "Run Ansys documentation style checks"
        uses: pyansys/actions/doc-style@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  doc-build:
    name: Doc building
    runs-on: ubuntu-latest
    needs: doc-style
    steps:
      - name: "Run Ansys documentation building action"
        uses: pyansys/actions/doc-build@v3

  doc-deploy-development:
    name: Doc dev version deploy
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: doc-build
    steps:
      - name: "Deploy developers documentation"
        uses: pyansys/actions/doc-deploy-dev@v3
        with:
            cname: ${{ env.DOCUMENTATION_CNAME }}
            token: ${{ secrets.GITHUB_TOKEN }}

  doc-deploy-stable:
    name: Doc stable version deploy
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: doc-deploy-development
    steps:
      - name: "Deploy stable documentation"
        uses: pyansys/actions/doc-deploy-stable@v3
        with:
            cname: ${{ env.DOCUMENTATION_CNAME }}
            token: ${{ secrets.GITHUB_TOKEN }}

  build-wheelhouse:
    name: "Build wheelhouse for latest Python versions"
    runs-on: ${{ matrix.os }}
    needs: code-style
    strategy:
       matrix:
           os: [ubuntu-latest, windows-latest]
           python-version: ['3.7', '3.8', '3.9', '3.10']
    steps:
      - name: "Build a wheelhouse of the Python library"
        uses: pyansys/actions/build-wheelhouse@v4
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          library-namespace: ${{ env.LIBRARY_NAMESPACE }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}

  tests:
    name: Smoke tests
    needs: build-wheelhouse
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        cfg:
          - {python-version: "3.7", toxenv: "py37"}
          - {python-version: "3.8", toxenv: "py38"}
          - {python-version: "3.9", toxenv: "py39"}
          - {python-version: "3.10", toxenv: "py310"}
      fail-fast: false

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.cfg.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.cfg.python-version }}

      - name: Install dependencies
        run: python -m pip install --upgrade pip ${{ matrix.build-system }} tox

      - name: Run Tox
        run: tox -e ${{ matrix.cfg.toxenv }}-smoke-cov

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.cfg.python-version ==  ${{ env.MAIN_PYTHON_VERSION }}

  build-library:
    name: "Build library"
    needs: [doc-deploy-stable, tests]
    runs-on: ubuntu-latest
    steps:
      - name: "Build library source and wheel artifacts"
        uses: pyansys/actions/build-library@v3
        with:
          library-name: ${{ env.LIBRARY_NAME }}

  release:
    name: "Release to private and public PyPI and to GitHub"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: [build-library]
    steps:
 
      - name: "Release to the private PyPI repository"
        uses: pyansys/actions/release-pypi-private@v4
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          twine-username: "__token__"
          twine-token: ${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}
 
      - name: "Release to the public PyPI repository"
        uses: pyansys/actions/release-pypi-public@v4
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          twine-username: "__token__"
          twine-token: ${{ secrets.PYPI_TOKEN }}
 
      - name: "Release to GitHub"
        uses: pyansys/actions/release-github@v4
        with:
          library-name: ${{ env.LIBRARY_NAME }}
