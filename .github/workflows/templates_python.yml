name: Templates Python
on:
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main

jobs:

  tests:
    name: ${{ matrix.cfg.template }} / ${{ matrix.cfg.build-system }} / ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.7", "3.10"]
        include:

          - python-version: "3.7"
            toxenv: py37
            toxextra: keep-output

          - python-version: "3.10"
            toxenv: py310
            toxextra: keep-output

        cfg:
          # All pybasic template tests
          - {template: "pybasic", build-system: "setuptools", outdir: "pybasic0/pybasic"}
            
          # All pybasic template tests
          - {template: "pyansys", build-system: "setuptools", outdir: "pyansys0/pyproduct-library"}

          # All pyansys_advanced template tests
          - {template: "pyansys_advanced", build-system: "flit", outdir: "pyansys_a0/pyproduct-library"}
          - {template: "pyansys_advanced", build-system: "poetry", outdir: "pyansys_a1/pyproduct-library"}
          - {template: "pyansys_advanced", build-system: "setuptools", outdir: "pyansys_a2/pyproduct-library"}

      fail-fast: false

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip tox

      - name: Bake ${{ matrix.cfg.template }}
        run: |
          # Bake only the desired templates
          export TEMPLATE=${{ matrix.cfg.template }}
          tox -e ${{ matrix.toxenv }}-${{ matrix.toxextra }}-template
          mv output $HOME/baked_templates && ls $HOME/baked_templates

      - name: Install and test project
        if: matrix.cfg.template != 'pyansys_advanced'
        run: |
          # Move to directory outside the current repository so tox does not
          # interfere with baked tox files
          cd "$HOME/baked_templates/test_template_python_${{ matrix.cfg.outdir }}"
          python -m pip install --upgrade pip
          python -m pip install -e .
          # Check code style
          #python -m pip install -r requirements_style.txt
          #python -m black --line-length {{ cookiecutter.__max_linelength }} doc src tests
          #python -m isort --profile black --line-length {{ cookiecutter.__max_linelength }} doc src tests
          #python -m flake8 doc src tests
          # Check unit tests
          python -m pip install -r requirements_tests.txt
          pytest --cov=src tests
          # Check documentation
          python -m pip install -r requirements_doc.txt
          sphinx-build doc/source doc/build -v -W -b html

      - name: Install act
        if: matrix.cfg.template == 'pyansys_advanced'
        run: |
          sudo apt-get install build-essential gcc
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          test -d ~/.linuxbrew && eval "$(~/.linuxbrew/bin/brew shellenv)"
          test -d /home/linuxbrew/.linuxbrew && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          test -r ~/.bash_profile && echo "eval \"\$($(brew --prefix)/bin/brew shellenv)\"" >> ~/.bash_profile
          brew install act
          echo "-P ubuntu-latest=ghcr.io/catthehacker/ubuntu:act-latest" >> ~/.actrc

      - name: Test baked project
        if: matrix.cfg.template == 'pyansys_advanced'
        run: |
          # Change to template directory location
          cd "$HOME/baked_templates/test_template_python_${{ matrix.cfg.outdir }}"
          # Create a fresh Python environment, install dependencies and baked project
          python -m venv .venv && source .venv/bin/activate
          python -m pip install --upgrade pip ${{ matrix.cfg.build-system }} tox pre-commit
          python -m pip install -e .
          # Initialize template as Git repository so pre-commit can be used
          git init
          git config --local user.name "User"
          git config --local user.email "user@email-server.domain"
          git add . && git commit -m "Initialize repository"
          # Run act, ignore runner errors and look for real ones
          act | grep -v -w "add-matcher"
